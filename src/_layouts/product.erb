---
layout: default
---
<% product = page %>

<h1><%= link_to product.data.title, product.url %></h1>

<main-content>
  <%= render "product", controller: site.controller, product: product %>
</main-content>

<br/>
<p><button onclick="refreshProduct(0)">Fast Refresh</button></p>
<p><button onclick="document.querySelector('main-content').innerHTML='<p>Loadingâ€¦â€¦</p>';refreshProduct(1)">Slow Refresh</button><br/><small>(Simulated Network Slowdown)</small></p>

<br/>

<p>In case this isn't immediately clear, you're currently viewing a <em>statically-rendered</em> Bridgetown page which is <em>dynamically-updated</em> with fresh data via a backend Rails API which is <em>re-rendering</em> the content of the page via the Bridgetown gem loaded in the Rails controller. There is no Rails view layer at all. <code>ActionView</code> isn't even loaded. It's all the same Bridgetown templates, whether statically-generated or dynamically-rendered by Rails. ðŸ‘€</p>

<script>
  async function refreshProduct(sleepTime) {
    const response = await fetch('/backend<%= page.id %>?sleep_time=' + Math.min(sleepTime, 10));
    const data = await response.text();
    const template = document.createElement("template")
    template.innerHTML = data

    const contentNode = document.querySelector("main-content")
    while (contentNode.firstChild && !contentNode.firstChild.remove());

    contentNode.append(template.content.querySelector("main-content"))
    document.querySelector("main").style.visibility = "visible"
  }

  document.querySelector("main").style.visibility = "hidden"
  setTimeout(() => {
    document.querySelector("main").style.visibility = "visible"
  }, 1000) // in case the request takes too long...

  refreshProduct(0)
</script>
